kind: Template
apiVersion: v1
message: |-
  The following service(s) have been created in your project: Drupal 8, MariaDB.
metadata:
  name: drupal
  annotations:
    description: Drupal 8, MariaDB, PHP 7.2
    repo: https://github.com/badri/drupal-8-composer.git
    icon: drupal
    iconClass: icon-drupal
    openshift.io/display-name: Drupal 8
    openshift.io/long-description: This template defines resources needed to develop a Debian based Drupal 8 setup running on PHP 7.1 using FPM and Nginx. It also includes resources required to create a MariaDB instance.
    tags: quickstart,php,drupal 8,shapeblock
    template.openshift.io/bindable: "false"
  labels:
    template: drupal-8
    from: shapeblock
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${NAME}
    labels:
      type: app
  spec:
    replicas: 1
    selector:
      app: ${NAME}
    template:
      metadata:
        labels:
          app: ${NAME}
      spec:
        volumes:
          # Create the shared files volume to be used in both pods
          - name: app
            emptyDir: {}
          - name: ${NAME}-files
            persistentVolumeClaim:
              claimName: ${NAME}-files
          - configMap:
              defaultMode: 420
              items:
              - key: drupal.conf
                path: default.conf
              name: drupal.conf
            name: config
        containers:
        - name: drupal
          image: ' '
          env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}-db-secret
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}-db-secret
          - name: MYSQL_HOST
            value: ${NAME}-db
          - name: MYSQL_PORT
            value: "3306"
          - name: MYSQL_DATABASE
            value: ${MYSQL_DATABASE}
          resources:
            limits:
              memory: ${APP_MEMORY_LIMIT}
          volumeMounts:
            - name: app
              mountPath: /app
            - name: ${NAME}-files
              mountPath: /shared
          lifecycle:
            postStart:
              exec:
                command:
                  - "/bin/sh"
                  - "-c"
                  - > 
                    cp -fr /code/. /app;
                    rm -rf /app/web/sites/default/files;
                    ln -s /shared /app/web/sites/default/files;
        - name: nginx
          image: ' '
          ports:
            - name: http
              containerPort: 8080
          resources:
            limits:
              memory: ${APP_MEMORY_LIMIT}
          volumeMounts:
            - name: app
              mountPath: /app
            - name: ${NAME}-files
              mountPath: /shared
            - name: config
              mountPath: /etc/nginx/conf.d/default.conf
              readOnly: true
              subPath: default.conf
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - drupal
          from:
            kind: "ImageStreamTag"
            name: ${NAME}:latest
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - nginx
          from:
            kind: "ImageStreamTag"
            name: nginx-drupal:1.17
            namespace: openshift
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${NAME}-files
    annotations:
      volume.beta.kubernetes.io/storage-class: "openebs-nfs"
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${FILES_VOLUME_CAPACITY}
- apiVersion: v1
  kind: Service
  metadata:
    name: ${NAME}
  spec:
    selector:
      app: ${NAME}
    ports:
      - name: http
        port: 8080
        protocol: TCP
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${NAME}-db-secret
  stringData:
    database-user: ${MYSQL_USER}
    database-password: ${MYSQL_PASSWORD}
    database-root-password: ${MYSQL_ROOT_PASSWORD}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${NAME}-db
    labels:
      type: service
  spec:
    replicas: 1
    selector:
      name: ${NAME}-db
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${NAME}-db
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}-db-secret
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}-db-secret
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-root-password
                name: ${NAME}-db-secret
          - name: MYSQL_DATABASE
            value: ${MYSQL_DATABASE}
          image: ' '
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          name: mariadb
          ports:
          - containerPort: 3306
            protocol: TCP
          resources:
            limits:
              memory: ${DB_MEMORY_LIMIT}
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE
                -e 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: ${NAME}-db-data
        volumes:
        - name: ${NAME}-db-data
          persistentVolumeClaim:
            claimName: ${NAME}-db
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mariadb
        from:
          kind: ImageStreamTag
          name: mariadb:10.2
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    name: ${NAME}-db
  spec:
    ports:
    - name: mariadb
      port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      name: ${NAME}-db
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${NAME}-db
    labels:
      app: ${NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${DB_VOLUME_CAPACITY}
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${NAME}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${NAME}
  spec:
    source:
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    strategy:
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: drupal-8:7.2
            namespace: openshift
          incremental: true
        type: Source
    triggers:
    - type: ImageChange
    - type: ConfigChange
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}
  spec:
    host: ${APPLICATION_DOMAIN}
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: ${NAME}
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: drupal.conf
  data:
    drupal.conf: >-
      server {
        root /app/web;
        listen 0.0.0.0:8080;
        index index.php;

          location = /favicon.ico {
              log_not_found off;
              access_log off;
          }
      
          location = /robots.txt {
              allow all;
              log_not_found off;
              access_log off;
          }
      
          # Very rarely should these ever be accessed outside of your lan
          location ~* \.(txt|log)$ {
              allow 192.168.0.0/16;
              deny all;
          }
      
          location ~ \..*/.*\.php$ {
              return 403;
          }
      
          location ~ ^/sites/.*/private/ {
              return 403;
          }
      
          # Block access to scripts in site files directory
          location ~ ^/sites/[^/]+/files/.*\.php$ {
              deny all;
          }
      
          # Allow "Well-Known URIs" as per RFC 5785
          location ~* ^/.well-known/ {
              allow all;
          }
      
          # Block access to "hidden" files and directories whose names begin with a
          # period. This includes directories used by version control systems such
          # as Subversion or Git to store control files.
          location ~ (^|/)\. {
              return 403;
          }
      
          location / {
              # try_files $uri @rewrite; # For Drupal <= 6
              try_files $uri /index.php?$query_string; # For Drupal >= 7
          }
      
          location @rewrite {
              rewrite ^/(.*)$ /index.php?q=$1;
          }
      
          # Don't allow direct access to PHP files in the vendor directory.
          location ~ /vendor/.*\.php$ {
              deny all;
              return 404;
          }
      
          # In Drupal 8, we must also match new paths where the '.php' appears in
          # the middle, such as update.php/selection. The rule we use is strict,
          # and only allows this pattern with the update.php front controller.
          # This allows legacy path aliases in the form of
          # blog/index.php/legacy-path to continue to route to Drupal nodes. If
          # you do not have any paths like that, then you might prefer to use a
          # laxer rule, such as:
          #   location ~ \.php(/|$) {
          # The laxer rule will continue to work if Drupal uses this new URL
          # pattern with front controllers other than update.php in a future
          # release.
          location ~ '\.php$|^/update.php' {
              fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
              # Security note: If you're running a version of PHP older than the
              # latest 5.3, you should have "cgi.fix_pathinfo = 0;" in php.ini.
              # See http://serverfault.com/q/627903/94922  for details.
              include fastcgi_params;
              # Block httpoxy attacks. See https://httpoxy.org/ .
              fastcgi_param HTTP_PROXY "";
              fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
              fastcgi_param PATH_INFO $fastcgi_path_info;
              fastcgi_param QUERY_STRING $query_string;
              fastcgi_intercept_errors on;
              fastcgi_pass 127.0.0.1:9000;
      	fastcgi_read_timeout 300;
          }
      
          # Fighting with Styles? This little gem is amazing.
          # location ~ ^/sites/.*/files/imagecache/ { # For Drupal <= 6
          location ~ ^/sites/.*/files/styles/ { # For Drupal >= 7
              try_files $uri @rewrite;
          }
      
          # Handle private files through Drupal. Private file's path can come
          # with a language prefix.
          location ~ ^(/[a-z\-]+)?/system/files/ { # For Drupal >= 7
              try_files $uri /index.php?$query_string;
          }
      
          location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
              try_files $uri @rewrite;
              expires max;
              log_not_found off;
          }
      }
parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  from: 'drupal-8-[a-f0-9]{6}'
  generate: expression
- description: Maximum amount of memory the App container can use.
  displayName: Memory Limit
  name: APP_MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Maximum amount of memory the MariaDB container can use.
  displayName: Memory Limit (MySQL)
  name: DB_MEMORY_LIMIT
  required: true
  value: 1Gi
- description: Volume space available for DB data, e.g. 512Mi, 2Gi
  displayName: Volume Capacity
  name: DB_VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Volume space available for sites/default/files, e.g. 512Mi, 2Gi
  displayName: Files Volume Capacity
  name: FILES_VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/badri/drupal-8-composer
- description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
- description: The exposed hostname that will route to the LEMP service, if left
    blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
- description: Github trigger secret.  A difficult to guess string encoded as part
    of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
- displayName: Database Name
  name: MYSQL_DATABASE
  required: true
  value: drupal8
- displayName: Database User
  name: MYSQL_USER
  required: true
  value: drupal8
- name: MYSQL_ROOT_PASSWORD
  displayName: MySQL root user Password
  description: Password for the MySQL root user.
  generate: expression
  from: "[a-zA-Z0-9]{16}"
- displayName: Database Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MYSQL_PASSWORD
